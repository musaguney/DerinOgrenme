# -*- coding: utf-8 -*-
"""DerinOgrenme

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HpA2-_Pk-HKhaYmLuZztG6ZTgvKo8jC_
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
from keras.preprocessing.image import ImageDataGenerator
from keras.applications import VGG16
from keras.models import Sequential
from keras.layers import Dense, Flatten, Dropout
from keras.optimizers import Adam

# Veri setinin bulunduğu dizin
data_directory = '/content/drive/MyDrive/Colab Notebooks/Pneumonia/X-Ray'

# Önceden eğitilmiş modelin yüklenmesi
pretrained_model = VGG16(weights='imagenet', include_top=False, input_shape=(150, 150, 3))

# Önceden eğitilmiş modelin üzerine özel katmanların eklenmesi
model = Sequential()
model.add(pretrained_model)
model.add(Flatten())
model.add(Dense(256, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(1, activation='sigmoid'))

# Önceden eğitilmiş katmanların dondurulması
pretrained_model.trainable = False

# Modelin derlenmesi
model.compile(optimizer=Adam(learning_rate=0.0001), loss='binary_crossentropy', metrics=['accuracy'])

# Veri artırma (data augmentation) işlemi
datagen = ImageDataGenerator(rescale=1./255, validation_split=0.2)

# Veri setinin yüklenmesi
train_generator = datagen.flow_from_directory(
        data_directory,
        target_size=(150, 150),
        batch_size=32,
        class_mode='binary',
        subset='training')

validation_generator = datagen.flow_from_directory(
        data_directory,
        target_size=(150, 150),
        batch_size=32,
        class_mode='binary',
        subset='validation')

# Modelin eğitimi
history = model.fit(
      train_generator,
      steps_per_epoch=train_generator.samples/train_generator.batch_size,
      epochs=10,
      validation_data=validation_generator,
      validation_steps=validation_generator.samples/validation_generator.batch_size)

# Test verisi için sadece rescale (ölçeklendirme) işlemi yapma
test_generator = datagen.flow_from_directory(
        data_directory,
        target_size=(150, 150),
        batch_size=32,
        class_mode='binary',
        shuffle=False)

# Test seti üzerinde modelin performansını değerlendirme
eval_result = model.evaluate(test_generator)
print("Test doğruluk oranı:", eval_result[1])  # Test doğruluk oranını yazdırma